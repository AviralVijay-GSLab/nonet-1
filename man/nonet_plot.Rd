% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nonet_plot.R
\name{nonet_plot}
\alias{nonet_plot}
\title{Plot the predictions or results of nonet_ensemble}
\usage{
nonet_plot(x, y, dataframe, plot_type = NULL, nonet_size = 20,
  nonet_alpha = 0.3, nonet_bins = 25)
}
\arguments{
\item{x}{x axis variable name or histogram entity name}

\item{y}{y axis variable name}

\item{dataframe}{dataframe which is used for plotting purpose.}

\item{plot_type}{type of plot, if not provided it takes "NULL"}

\item{nonet_size}{size of plot need to feed in ggplot}

\item{nonet_alpha}{value of alpha for ggplot}

\item{nonet_bins}{number of bins for histogram}
}
\value{
plotted for the plot results provided as input.
}
\description{
Plot the predictions or results of nonet_ensemble
}
\examples{
# nonet_plot functionality can be explained via below example
# Setup
library(caret)
library(nonet)
library(ggplot2)
library(rlist)

# Load Data
dataframe <- data.frame(banknote_authentication)

# Spliting into train and test
index <- createDataPartition(dataframe$class, p=0.75, list=FALSE)
trainSet <- dataframe[ index,]
testSet <- dataframe[-index,]

trainSet$class <- as.factor(ifelse(trainSet$class >= 1, 'Yes', 'No'))
testSet$class <- as.factor(ifelse(testSet$class >= 1, 'Yes', 'No'))

trainSet <- data.frame(trainSet)
testSet <- data.frame(testSet)

#Feature selection 
control <- rfeControl(functions = rfFuncs,
  method = "repeatedcv",
  repeats = 3,
  verbose = FALSE)

outcomeName <- 'class'
predictors <- c("variance", "skewness", "curtosis", "entropy")

# Model Training
banknote_rf <- train(trainSet[,predictors],trainSet[,outcomeName],method='rf')
banknote_nnet <- train(trainSet[,predictors],trainSet[,outcomeName],method='nnet')


predictions_rf <- predict.train(object=banknote_rf,testSet[,predictors],type="prob")
predictions_nnet <- predict.train(object=banknote_nnet,testSet[,predictors],type="prob")

predictions_rf_raw <- predict.train(object=banknote_rf,testSet[,predictors],type="raw")
predictions_nnet_raw <- predict.train(object=banknote_nnet,testSet[,predictors],type="raw")

Stack_object <- list(predictions_rf$Yes, predictions_nnet$Yes)

names(Stack_object) <- c("model_rf", "model_nnet")

# Prediction using nonet_ensemble function
prediction_nonet <- nonet_ensemble(Stack_object, "model_nnet")
# Converting probabilities into classes
prediction_nonet <- as.factor(ifelse(prediction_nonet >= "0.5", "Yes", "No"))

# Results
nonet_eval <- confusionMatrix(prediction_nonet, testSet[,outcomeName])
nonet_eval_rf <- confusionMatrix(predictions_rf_raw,testSet[,outcomeName])
nonet_eval_nnet <- confusionMatrix(predictions_nnet_raw,testSet[,outcomeName])
eval_df <- data.frame(nonet_eval$table)
eval_rf_df <- data.frame(nonet_eval_rf$table)
eval_nnet_df <- data.frame(nonet_eval_nnet$table)
nonet_plot(eval_df$Prediction, eval_df$Reference, eval_df, plot_type = "point")
nonet_plot(eval_rf_df$Prediction, eval_rf_df$Reference, eval_rf_df, plot_type = "boxplot")
nonet_plot(eval_nnet_df$Prediction, eval_nnet_df$Reference, eval_nnet_df, plot_type = "density")
}
