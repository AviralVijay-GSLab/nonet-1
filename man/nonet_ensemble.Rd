% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nonet_ensemble.R
\name{nonet_ensemble}
\alias{nonet_ensemble}
\title{Ensemble Prediction without using training labels}
\usage{
nonet_ensemble(object, best_modelname)
}
\arguments{
\item{object}{prediction_list object, as from `tune_models`}

\item{best_modelname}{Best model name is one which performance better while evaluating using any evaluation matrix like confusion matrix.}
}
\value{
A list of ensembled predictions. You can evaluate the performance of ensembled prediction using the evaulation matrix as Confusion matrix or AUROC.
}
\description{
Ensemble Prediction without using training labels
}
\examples{
# nonet_ensemble functionality can be explained via below example
# Setup
library(caret)
library(nonet)
library(ggplot2)
library(rlist)

# Load Data
dataframe <- data.frame(banknote_authentication)

# Spliting into train and test
index <- createDataPartition(dataframe$class, p=0.75, list=FALSE)
trainSet <- dataframe[ index,]
testSet <- dataframe[-index,]

trainSet$class <- as.factor(ifelse(trainSet$class >= 1, 'Yes', 'No'))
testSet$class <- as.factor(ifelse(testSet$class >= 1, 'Yes', 'No'))

trainSet <- data.frame(trainSet)
testSet <- data.frame(testSet)

#Feature selection 
control <- rfeControl(functions = rfFuncs,
  method = "repeatedcv",
  repeats = 3,
  verbose = FALSE)

outcomeName <- 'class'
predictors <- c("variance", "skewness", "curtosis", "entropy")

banknote_rf <- train(trainSet[,predictors],trainSet[,outcomeName],method='rf')
banknote_nnet <- train(trainSet[,predictors],trainSet[,outcomeName],method='nnet')

predictions_rf <- predict.train(object=Titanic_rf,testSet[,predictors],type="prob")
predictions_nnet <- predict.train(object=Titanic_nnet,testSet[,predictors],type="prob")

predictions_rf_raw <- predict.train(object=Titanic_rf,testSet[,predictors],type="raw")
predictions_nnet_raw <- predict.train(object=Titanic_nnet,testSet[,predictors],type="raw")

Stack_object <- list(predictions_rf$Yes, predictions_nnet$Yes)
names(Stack_object) <- c("model_rf", "model_nnet")

# Prediction using nonet_ensemble function
prediction_nonet <- nonet_ensemble(Stack_object, "model_nnet")
# Converting probabilities into classes
prediction_nonet <- as.factor(ifelse(prediction_nonet >= "0.5", "Yes", "No"))

# Results
nonet_eval <- confusionMatrix(prediction_nonet, testSet[,outcomeName])
confusionMatrix(predictions_rf_raw,testSet[,outcomeName])
confusionMatrix(predictions_nnet_raw,testSet[,outcomeName])

}
